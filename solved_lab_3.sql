
-- 1. List the number of films per category:
SELECT fc.category_id, count(*) as "amount", c.name FROM sakila.film_category as fc
JOIN sakila.category as c
on fc.category_id = c.category_id
group by category_id
order by fc.category_id;

-- 2. Retrieve the store ID, city, and country for each store:
SELECT st.store_id, ci.city, co.country FROM sakila.store as st
JOIN sakila.address as ad
on st.address_id = ad.address_id
JOIN sakila.city as ci
on ad.city_id = ci.city_id
JOIN sakila.country as co
on ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars:
-- I used manager_staff_id becuase it has only two stores that are the same store.id 
SELECT st.manager_staff_id, sum(amount) as "revenue" FROM sakila.payment as pa
JOIN sakila.store as st
ON pa.staff_id = st.manager_staff_id
GROUP BY pa.staff_id;

-- 4. Determine the average running time of films for each category:
SELECT fc.category_id, avg(fi.length) as "AVG_Time", c.name as "category_name" FROM sakila.film_category as fc
JOIN film as fi
on fi.film_id = fc.film_id
JOIN sakila.category as c
on fc.category_id = c.category_id
group by category_id;

-- 5. Identify the film categories with the longest average running time:
DROP TABLE sakila.avg_category;
CREATE TEMPORARY TABLE sakila.avg_category
SELECT fc.category_id, avg(fi.length) as "AVG_Time", c.name as "category_name" FROM sakila.film_category as fc
JOIN film as fi
on fi.film_id = fc.film_id
JOIN sakila.category as c
on fc.category_id = c.category_id
group by category_id;

SELECT * FROM sakila.avg_category as tb1
WHERE tb1.AVG_Time > (SELECT avg(length) from sakila.film);

-- 6. Display the top 10 most frequently rented movies in descending order:
SELECT count(inv.film_id) as "count", fi.title FROM sakila.rental as re
JOIN inventory as inv
on re.inventory_id = inv.inventory_id
JOIN film as fi
on fi.film_id = inv.film_id
group by inv.film_id
order by count DESC;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
-- Yes it can be rented from store 1. Because the store_id is the same as staff_id. Therefore I used that last one
SELECT re.inventory_id,inv.film_id, fi.title, re.staff_id FROM sakila.rental as re
JOIN inventory as inv
on re.inventory_id = inv.inventory_id
JOIN film as fi
on fi.film_id = inv.film_id
WHERE title = "academy Dinosaur" and staff_id = 1;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating 
-- whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this 
-- information can be obtained using a CASE statement combined with IFNULL."

-- films availabe in the invetory
SELECT film_id FROM sakila.inventory
group by film_id;
-- result availability column
SELECT title,
	CASE 
		WHEN film_id in  (SELECT film_id FROM sakila.inventory group by film_id) THEN "Available"
		ELSE "NOT available"
	END as availability
FROM sakila.film;

-- Here, checking that 42 titles are the one not available:
with availability as (SELECT title,
	CASE 
		WHEN film_id in  (SELECT film_id FROM sakila.inventory group by film_id) THEN "Available"
		ELSE "NOT available"
	END as availability
FROM sakila.film)
SELECT * FROM availability
WHERE availability = "NOT available";
